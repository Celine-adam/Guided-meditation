import { StatusCodes } from "http-status-codes";
import bcrypt from "bcrypt";
import User from "../models/User.js";
import { generateToken } from "../helpers/authHelper.js";

/**
 * Controller method to get a list of users from the users collection.
 * @param {*} req
 * @param {*} res
 */
export const listUsers = async (req, res) => {
  try {
    const users = await User.find();
    return res.status(StatusCodes.OK).json(users);
  } catch (error) {
    return res
      .status(StatusCodes.INTERNAL_SERVER_ERROR)
      .json({ message: error.toString() });
  }
};

/**
 * Controller method to insert a new user into the users collection
 * @param {*} req
 * @param {*} res
 */
export const createUser = async (req, res) => {
  try {
    //GETTING the hashed value from the password
    //SALT will be autogenerated for us and included
    const hashedPassword = await bcrypt.hash(req.body.password, 10);

    const createdUser = await User.create({
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      userName: req.body.userName,
      email: req.body.email,
      password: hashedPassword,
    });

    return res
      .status(StatusCodes.OK)
      .json({ message: "User Created", createdUser });
  } catch (error) {
    return res
      .status(StatusCodes.INTERNAL_SERVER_ERROR)
      .json({ message: error.toString() });
  }
};

/**
 * Controller method to sign in a user
 * @param {*} req
 * @param {*} res
 */
export const loginUser = async (req, res) => {
  try {
    //do we have a user with that username?
    const user = await User.findOne({ userName: req.body.userName });

    if (!user) {
      return res
        .status(StatusCodes.UNAUTHORIZED)
        .json({ message: "User not authorized." });
    }
    // is the password matching with the password provided by that user?
    // if(req.body.password === user.password)
    //bcrypt.compare("testing123","$2b$10$5USrSV.w/AqueUssk5/7beH2IOLNjKltH7Q9Mo1bZBPE7aNkGgQBi")
    const checkPassword = await bcrypt.compare(
      req.body.password,
      user.password
    );

    if (!checkPassword) {
      return res
        .status(StatusCodes.UNAUTHORIZED)
        .json({ message: "User not authorized." });
    }
    //generate our token
    const token = generateToken(user);

    //if authorized : send back a token
    return res
      .status(StatusCodes.OK)
      .json({ message: "Welcome to the system", token });
  } catch (error) {
    return res
      .status(StatusCodes.INTERNAL_SERVER_ERROR)
      .json({ message: error.toString() });
  }
};

export default { createUser, loginUser };
